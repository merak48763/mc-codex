use ::java::util::text::Text
use ::java::util::text::TextStyle
use ::java::world::item::ItemStack
use super::CommandStorage
use super::DescriptionKey
use super::CompoundDescriptionKey
use super::super::custom_data::BakedEntry
use super::archive::ArchiveEntry
use super::archive::Insertion

dispatch :storage[codex:internal] to CommandStorage<struct InternalStorage {
  /// The bundle item
  book_item?: struct {
    /// The original item stack
    item_stack?: ItemStack,
    /// Typed custom data
    custom_data?: codex:item_data[book],
  },
  /// The button item in the bundle
  button_item?: struct {
    /// Typed custom data
    select_entry_data?: codex:button_action[select_entry],
  },
  /// Input/output of transform functions
  transforms?: struct {
    [#[id=(registry="function", path="transforms/")] string]: struct TransformsIO {
      /// Input
      in?: codex:transforms_in[[%parent.%key]],
      /// Output
      out?: codex:transforms_out[[%parent.%key]],
      /// Temp storage
      temp?: codex:transforms_temp[[%parent.%key]],
    },
  },
  /// Macro params
  macro?: struct {
    /// Banner `base_color` component
    base_color?: :data_component[base_color],
    /// Arbitrary ID
    id?: string,
    /// Potion effect type
    effect?: string,
    /// Array index
    index?: int,
  },
}>

dispatch codex:transforms_in[%unknown] to any
dispatch codex:transforms_out[%unknown] to any
dispatch codex:transforms_temp[%unknown] to any

// item stack → translated item name
// extra input: @s = 24b09cde-0-0-0-2
dispatch codex:transforms_in[codex:item_name] to ItemStack
dispatch codex:transforms_out[codex:item_name] to Text

// item name → common lore containing item name
dispatch codex:transforms_in[codex:active_book_lore] to Text
dispatch codex:transforms_out[codex:active_book_lore] to [Text]

// archive entry IDs → page object
dispatch codex:transforms_in[codex:bake_book_contents] to [DescriptionKey]
dispatch codex:transforms_out[codex:bake_book_contents] to codex:item_data[book]

// single entry ID → lore and button item
dispatch codex:transforms_in[codex:bake_single_entry] to DescriptionKey
dispatch codex:transforms_out[codex:bake_single_entry] to BakedEntry
dispatch codex:transforms_temp[codex:bake_single_entry] to struct {
  /// Other keywords related to the main description
  related_keywords?: [(
    #[id="codex:page"] string |
    CompoundDescriptionKey |
  )],
  /// Archive entry retrieved from `codex:archives`
  retrieved_archive?: ArchiveEntry,
  /// Transformed `with` text components
  with?: [Text],
}

// text & style → styled text component
dispatch codex:transforms_in[codex:format_text] to struct {
  /// Text content
  content?: Text,
  /// Text style
  style?: TextStyle,
}
dispatch codex:transforms_out[codex:format_text] to Text

// archive insertion → standard text component
// extra input: context related scores
dispatch codex:transforms_in[codex:insertion] to Insertion
dispatch codex:transforms_out[codex:insertion] to Text
dispatch codex:transforms_temp[codex:insertion] to struct {
  /// Typed input
  lookup_insertion?: codex:insertion[lookup],
  /// Temp storage of unformatted result text
  picked_text?: Text,
}
