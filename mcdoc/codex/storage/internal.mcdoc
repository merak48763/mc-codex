use ::java::world::item::ItemStack
use ::java::util::text::Text
use super::CommandStorage
use super::book_data::BookData
use super::archive::BulletType

dispatch :storage[codex:internal] to CommandStorage<struct InternalStorage {
  /// The bundle item
  book_item?: struct {
    /// The original item stack
    item_stack?: ItemStack,
    /// Typed custom data
    custom_data?: codex:item_data[book],
    /// Book contents
    baked_contents?: BookData,
  },
  /// Remote storage of the bulky book contents
  baked_books?: struct {
    [#[integer] string]?: BookData,
  },
  /// The button item in the bundle
  button_item?: struct {
    /// Typed custom data
    select_entry_data?: codex:button_action[select_entry],
  },
  /// Input/output of transform functions
  transforms?: struct {
    [#[id=(registry="function", path="util/")] string]: struct TransformsIO {
      /// Input
      in?: codex:transforms_in[[%parent.%key]],
      /// Output
      out?: codex:transforms_out[[%parent.%key]],
      /// Temp storage
      temp?: codex:transforms_temp[[%parent.%key]],
    },
  },
  /// Prefixes of description lines
  bullet?: struct {
    [BulletType]: Text,
  },
  /// Macro params
  macro?: struct {
    /// Banner `base_color` component
    base_color?: :data_component[base_color],
    /// Arbitrary ID
    id?: string,
    /// Potion effect type
    effect?: string,
    /// Array index
    index?: int,
  },
}>

dispatch codex:transforms_in[%unknown] to any
dispatch codex:transforms_out[%unknown] to any
dispatch codex:transforms_temp[%unknown] to any
