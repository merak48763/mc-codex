use ::java::util::text::Text
use ::java::util::text::TextStyle
use ::java::world::item::ItemStack
use super::CommandStorage

dispatch :storage[codex:internal] to CommandStorage<struct InternalStorage {
  /// The bundle item
  book_item?: struct {
    /// The original item stack
    item_stack?: ItemStack,
    /// Typed custom data
    custom_data?: codex:item_data[book],
  },
  /// The button item in the bundle
  button_item?: struct {
    /// Typed custom data
    custom_data?: codex:item_data[button],
    /// Typed custom data
    select_entry_data?: codex:button_action[select_entry],
  },
  /// Input/output of transform functions
  transforms?: struct {
    [#[id=(registry="function", path="transforms/")] string]: struct TransformsIO {
      /// Input
      in?: codex:transforms_in[[%parent.%key]],
      /// Output
      out?: codex:transforms_out[[%parent.%key]],
      /// Temp storage
      temp?: codex:transforms_temp[[%parent.%key]],
    },
  },
  /// Macro params
  macro?: struct {
    /// Banner `base_color` component
    base_color?: :data_component[base_color],
    /// Arbitrary ID
    id?: string,
    /// Potion effect type
    effect?: string,
  },
}>

dispatch codex:transforms_in[%unknown] to any
dispatch codex:transforms_out[%unknown] to any
dispatch codex:transforms_temp[%unknown] to any

dispatch codex:transforms_in[codex:item_name] to ItemStack
dispatch codex:transforms_out[codex:item_name] to Text

dispatch codex:transforms_in[codex:active_book_lore] to Text
dispatch codex:transforms_out[codex:active_book_lore] to [Text]
