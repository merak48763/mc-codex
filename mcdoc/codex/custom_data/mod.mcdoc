use ::java::util::text::Text
use ::java::world::item::ItemStack

dispatch mcdoc:custom_data[codex] to struct CodexItemData {
  type: ItemType,
  ...codex:item_data[[type]],
}
dispatch codex:item_data[%unknown] to struct {}

dispatch codex:item_data[book] to struct BookItemData {
  /// State of the book
  state?: BookState,
  /// Displaying page of loaded description
  active_page?: BakedPage,
  /// Hidden pages of loaded description
  /// `active_page` is replaced by `other_pages[0]` when "next page" button is clicked
  other_pages?: [BakedPage],
}

type BakedPage = [BakedEntry] @ ..11
struct BakedEntry {
  /// Lore appended to the book item
  lore?: :data_component[lore],
  /// The gui button appended to bundle contents
  button?: ItemStack,
}

dispatch codex:item_data[button] to struct ButtonItemData {
  action: ButtonAction,
  ...codex:button_action[[action]],
}
dispatch codex:button_action[%unknown] to struct {}

dispatch codex:button_action[select_entry] to struct SelectEntryAction {
  /// Index of the book item's `active_page` list
  entry_index?: int @ 0..,
}

enum(string) ItemType {
  /// The bundle item
  Book = "book",
  /// Button items in the bundle
  Button = "button",
}
enum(string) BookState {
  /// Idle state
  Empty = "empty",
  /// Inspecting an item
  Active = "active",
  /// Displaying an error state
  Error = "error",
}
enum(string) ButtonAction {
  /// Change page
  NextPage = "next_page",
  /// Select an entry
  Select = "select_entry",
  /// No action
  None = "nil",
}
